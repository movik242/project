---
- name: set timezone to Moscow
  timezone:
    name: Europe/Moscow
    
- name: install postgresql key # добавляем ключ postgres
  apt_key:
    url: '{{ item }}'
    state: present
  with_items: '{{ postgresql_apt_key }}'
  when:
    - postgresql_apt_key is defined
    - postgresql_apt_key|length

- name: add postgresql repositories # добавляем репозиторий postgres
  apt_repository:
    repo: '{{ item }}'
    state: present
    update_cache: yes
    filename: 'pgdg'
  with_items: '{{ postgresql_apt_repo_url }}'
  when:
    - postgresql_apt_repo_url is defined
    - postgresql_apt_repo_url|length

- name: copy pgadmin key # копируем pgadmin
  copy:
    src: files/packages_pgadmin_org.pub
    dest: /home/vagrant/packages_pgadmin_org.pub

- name: install pgadmin key # добавляем ключ pgadmin
  apt_key:
    file: /home/vagrant/packages_pgadmin_org.pub
    state: present
    
- name: install pgadmin repositories # добавляем репозиторий pgadmin
  apt_repository:
    repo: '{{ item }}'
    state: present
    update_cache: yes
    filename: 'pgadmin4'
  with_items: '{{ pgadmin_apt_repo_url }}'
  when:
    - pgadmin_apt_repo_url is defined
    - pgadmin_apt_repo_url|length

- name: Update Repository cache # загружаем репозитории локально
  ansible.builtin.apt:
    update_cache: true
      
- name: Install # установка postgres и pgadmin, зависимости
  ansible.builtin.apt:
    name: '{{ item }}'
    state: present
  with_items:
    - 'postgresql-13'
    - 'pgadmin4'
    - 'net-tools'
    - 'traceroute'
    - 'zabbix-agent'
    - 'borgbackup'
    - 'openssl'
    - 'rsyslog-mysql'

- name: install pip3  # установка python
  apt: 
    name: "{{ item }}"
    state: present
  with_items:
    - 'python3-pip'
    - 'python3-psycopg2'
    - 'python3-pexpect'
    - 'bash-completion'

- name: Make sure psycopg2 is installed # установка python библиотеки
  pip:
    name: psycopg2-binary
    state: present

- name: copy file zabbix # копируем shcema базы данных zabbix
  copy:
    src: files/server.sql.gz
    dest: /home/vagrant
    
- name: copy file pg_hba.conf # копируем pg_hba.conf 
  copy:
    src: files/pg_hba.conf
    dest: /etc/postgresql/13/main/pg_hba.conf
    
- name: copy fail postgresql.conf # копируем postgresql.conf
  copy:
    src: files/postgresql.conf
    dest: /etc/postgresql/13/main/postgresql.conf
    
- name: Software pgadmin4 # начальная настройка pgadmin4
  ansible.builtin.expect:
    command: /usr/pgadmin4/bin/setup-web.sh
    responses:
      Email address: "movik@pro.ru"
      Password: "movik242"
      Retype password: "movik242"
      Continue (y/n)?: "y"
      Do you wish to continue (y/n)?: "y"
      
- name: Add user zabbix create a password for user zabbix
  user:
    name: zabbix
    password: admin
    
#- name: Add the user with a specific uid and a primary group
#    name: zabbix
#    uid: 1001
#    group: zabbix   
    
- name: Add the user with a bash shell
  ansible.builtin.user:
    name: zabbix
    shell: /bin/bash
    groups: root
    append: yes
    

- name: "Install Python packages"
  apt: "name={{ item }}  state=present"
  with_items:
    - 'python3-psycopg2'

- name: Reload service
  ansible.builtin.service:
    name: '{{ item }}'
    state: restarted
  with_items:
    - 'postgresql'  
    
- name: Run a script no arguments (free form)
  ansible.builtin.script: files/dbzabbix.sh
  ignore_errors: yes
  
- name: Run a script no arguments (free form)
  ansible.builtin.script: files/db.sh
  ignore_errors: yes
  
- name: Connect to default database and create a user zabbix
  ansible.builtin.shell:
    cmd: bash -c "zcat server.sql.gz | sudo -u zabbix psql zabbix"  
  ignore_errors: yes
  
- name: Reload service
  ansible.builtin.service:
    name: '{{ item }}'
    state: restarted
  with_items:
    - 'postgresql'     
    
- name: copy fail hosts # копируем hosts для настройки отображения
  copy:
    src: files/hosts
    dest: /etc/hosts
    
- name: copy fail rsyslog # копируем rsyslog
  copy:
    src: files/rsyslog.conf
    dest: /etc/rsyslog.conf            
    
- name: copy fail zabbix-agentd.conf # копируем zabbix-agentd.conf, настройка подключения к zabbix
  copy:
    src: files/zabbix_agentd.conf
    dest: /etc/zabbix/zabbix_agentd.conf    
    
- name: Copy key to backup
  ansible.builtin.copy:
    src:  files/sshborg/
    dest: /root/.ssh/
    directory_mode: yes    
    
- name: Creates directory
  ansible.builtin.file:
    path: /root/.ssh/
    state: directory
    mode: '0700'    
    
- name: Chmod 666
  ansible.builtin.file:
    path: /root/.ssh/id_rsa
    mode: '0600'
 
- name: Chmod 666
  ansible.builtin.file:
    path: /root/.ssh/id_rsa.pub
    mode: '0600'

- name: Chmod 666
  ansible.builtin.file:
    path: /root/.ssh/config
    mode: '0600'    
    
- name: Copy timer, service to backup
  ansible.builtin.copy:
    src: files/borg-backup.service
    dest: /etc/systemd/system/borg-backup.service
    
- name: Copy timer, service to borg
  ansible.builtin.copy:
    src: files/borg-backup.timer
    dest: /etc/systemd/system/borg-backup.timer     
    
- name: Copy key for https
  ansible.builtin.copy:
    src: files/sslhttps/
    dest: /usr/local/share/ca-certificates/
    directory_mode: yes

- name: install ca package on debian systems
  apt:
    name: ca-certificates
    state: present
    update_cache: yes 

- name: Remove file (delete file)
  ansible.builtin.file:
    path: /etc/apache2/sites-enabled/default-ssl.conf
    state: absent
    
- name: Remove file (delete file)
  ansible.builtin.file:
    path: /etc/apache2/sites-enabled/000-default.conf
    state: absent    

- name: Copy key for https
  ansible.builtin.copy:
    src: files/sslhttps/postgres.crt
    dest: /etc/ssl/certs/postgres.crt
  
- name: Copy key for https
  ansible.builtin.copy:
    src: files/sslhttps/postgres.key
    dest: /etc/ssl/private/postgres.key

- name: enable ssl apache site  # включаем ssl для сайта
  ansible.builtin.shell: bash -c "sudo a2ensite default-ssl"
  
- name: enable ssl apache site  # включаем ssl для сайта
  ansible.builtin.shell: bash -c "sudo a2enmod ssl"
  
- name: Copy timer, service to backup
  ansible.builtin.copy:
    src: files/default-ssl.conf
    dest: /etc/apache2/sites-enabled/default-ssl.conf

- name: copy fail 50-cloud-init.conf # отключаем вход ssh по паролю
  copy:
    src: files/50-cloud-init.conf  
    dest: /etc/ssh/sshd_config.d/50-cloud-init.conf    
     
- name: Enable service #Включение сервисов
  ansible.builtin.service:
    name: '{{ item }}'
    enabled: yes
  with_items:
    - 'borg-backup.service'
    - 'borg-backup.timer'
    - 'rsyslog' 

- name: Reload service
  ansible.builtin.service:
    name: '{{ item }}'
    state: restarted
  with_items:
    - 'zabbix-agent' 
    - 'apache2'
    - 'rsyslog' 
  ignore_errors: yes  

- name: Copy conf netplan
  ansible.builtin.copy:
    src:  files/netplan/
    dest: /etc/netplan/
    directory_mode: yes  

- name: Netplan apply
  ansible.builtin.shell:
    cmd: bash -c "sudo netplan apply"  
  ignore_errors: yes











    
    
    
    
